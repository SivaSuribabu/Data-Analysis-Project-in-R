---
title: "CaseStudy_Project"
author: "siva"
date: "2022-11-20"
output: pdf_document
---

#install required packages

```{r}

library(tidyverse)
library(lubridate)
library(ggplot2)

```

#Remember to use Your own directory

```{r}

getwd()
setwd("/Users/sivas/OneDrive/Desktop/Cyclics_trip CaseStudy/csv")
getOption("repos")

```

#=====================
# STEP-1 Collect Data
# Upload Data sets 
#=====================
```{r}

q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q2_2019 <- read_csv("Divvy_Trips_2019_q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_q4.csv")

```



#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================

# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
```{r}

colnames(q1_2019)
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)

```


# Rename columns  to make them consistent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
```{r}
(q1_2019 <- rename (q1_2019,
         Trip_id = trip_id
  ))
colnames(q1_2019)

(q1_2019 <- rename(q1_2019, tip_id= Trip_id))

colnames(q1_2019)

```


# Inspect the data frames and look for incongruities
```{r}

str(q1_2019)
str(q2_2019)
str(q3_2019)
str(q4_2019)

```



# Convert trip_id and bikeid to character so that they can stack correctly

```{r}
q1_2019 <- mutate(q1_2019,tip_id=as.numeric(tip_id),
                  bikeid=as.numeric(bikeid))

q4_2019 <- mutate(q4_2019,trip_id=as.numeric(trip_id),
                  bikeid=as.numeric(bikeid))

```



# Stack individual quarter's data frames into one big data frame

```{r}

all_trips <- bind_rows(q1_2019,q2_2019,q3_2019,q4_2019)
View(all_trips)

```



# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020

```{r}

all_trips <- all_trips %>%  
  select(-c(birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))


```

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================

# Inspect the new table that has been created
```{r}

colnames(all_trips) # displays the coloumns names 

```

```{r}

nrow(all_trips) # shows how many rows in the data frame

```


```{r}
ncol(all_trips) # shows how many columns in the data frame
```


```{r}

dim(all_trips)  #shows dimensions of the data frame 

```


```{r}

head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)

```


```{r}

tail(all_trips)

```


```{r}

summary(all_trips)

```


```{r}

str(all_trips)  #See list of columns and data types (numeric, character, etc)

```



# Reassign to the desired values (we will go with the current 2020 labels)

```{r}
all_trips <- all_trips %>% 
          mutate(usertype=recode(usertype,
                                 "Subscriber"="Member",
                                 "Customer" = "Casual"))
```

# To View your modified DataSet
```{r}
View(all_trips)
```

# Check to make sure the proper number of observations were reassigned

```{r}
table(all_trips$usertype)
```

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level

```{r}
all_trips$Date <- as.Date(all_trips$start_time) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$Date),"%m")
all_trips$day <- format(as.Date(all_trips$Date),"%d")
all_trips$year <- format(as.Date(all_trips$Date),"%y")
all_trips$day_of_week <- format(as.Date(all_trips$Date), "%A")

```

# To View your modified DataSet
```{r}
View(all_trips)
```

# Add a "ride_length" calculation to all_trips (in seconds)
```{r}
all_trips$ride_length <- difftime(all_trips$end_time,all_trips$start_time)

```


# Inspect the structure of the columns
```{r}
str(all_trips)
```



# Convert "ride_length" from Factor to numeric so we can run calculations on the data
```{r}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))

```

```{r}
is.numeric(all_trips$ride_length)
```

# Remove "bad" data
# The data frame includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
```{r}
all_trips_v2 <- all_trips[!(all_trips$from_station_name =="HQ QR"| all_trips$ride_length<0),]
```

# To View your modified DataSet
```{r}
View(all_trips)
```


#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================
# Descriptive analysis on ride_length (all figures in seconds)

```{r}
mean(all_trips_v2$ride_length)  #straight average (total ride length / rides)
```


```{r}
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
```


```{r}
max(all_trips_v2$ride_length)  #longest ride
```


```{r}
min(all_trips_v2$ride_length)  #shortest ride
```



# You can condense the four lines above to one line using summary() on the specific attribute
```{r}
summary(all_trips_v2$ride_length)


```
```{r}
summary(all_trips_v2)
```




# Compare members and casual users

```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype, FUN=mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$ride_length, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$ride_length, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$ride_length,FUN=min)

```



# See the average ride time by each day for members vs casual users


```{r}
aggregate(all_trips_v2$ride_length~all_trips_v2$usertype+all_trips_v2$day_of_week, FUN=mean)
```

# Notice that the days of the week are out of order. Let's fix that.
```{r}
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

```


# Now, let's run the average ride time by each day for members vs casual users
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype + all_trips_v2$day_of_week, FUN = mean)

```

# analyze ridership data by type and weekday


```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(usertype, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(usertype, weekday)		

```

# Let's visualize the number of rides by rider type
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(usertype, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(usertype, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = usertype)) +
  geom_col(position = "dodge")

```


# Let's create a visualization for average duration


```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(usertype, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(usertype, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = usertype)) +
  geom_col(position = "dodge")

```

#=================================================
# STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS
#=================================================

# Create a csv file that we will visualize in Excel, Tableau, or my presentation software
```{r}
counts <- aggregate(all_trips_v2$ride_length~all_trips_v2$usertype+all_trips_v2$day_of_week,FUN=mean)

```

# To create CSV file of your project 
```{r}
write.csv(counts,'avg_ride_length.csv')

```

            
            
            
            